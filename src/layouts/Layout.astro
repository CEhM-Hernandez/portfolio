---
// ----------- components ----------- //
import Footer from '@components/Footer.astro'
import Header from '@components/Header.astro'

// ----------- styles ----------- //
import '@fontsource/rubik/400.css'
import '@/styles/global.css'
import { ClientRouter } from 'astro:transitions'

// ----------- config ----------- //
import Analytics from '@vercel/analytics/astro'
import PageContainer from '@/components/PageContainer.astro'

// ----------- props ----------- //
interface Props {
  title: string
  description: string
}

const { title, description } = Astro.props
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />

    <style>
      /* Prevent FOUC during view transitions */
      :root {
        color-scheme: light dark;
        scroll-behavior: smooth;
        --theme-transition: none;
      }

      /* Force styles to persist during view transitions */
      html {
        font-family: 'Rubik', system-ui, sans-serif !important;
        font-weight: 400;
        overflow-x: hidden;
      }

      body {
        font-family: inherit !important;
        font-weight: inherit;
        display: flex !important;
        flex-direction: column !important;
        align-items: center !important;
        margin: 0 !important;
        padding: 0 !important;
        min-height: 100vh !important;
      }

      /* Ensure theme classes persist during transitions */
      .dark {
        color-scheme: dark !important;
      }

      /* View transition specific styles */
      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation-duration: 0s !important;
      }

      /* Disable transitions during theme changes to prevent conflicts */
      *,
      *::before,
      *::after {
        transition-duration: var(--theme-transition, 0.3s);
      }

      @media (prefers-reduced-motion: reduce) {
        html {
          scroll-behavior: auto !important;
        }

        *,
        *::before,
        *::after {
          transition-duration: 0.01ms !important;
        }

        ::view-transition-old(root),
        ::view-transition-new(root) {
          animation: none !important;
        }
      }
    </style>

    <script>
      ;(function () {
        const getTheme = () => {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme')
          }
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark'
          }
          return 'light'
        }

        const theme = getTheme()
        if (theme === 'dark') {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      })()
    </script>

    <Analytics />
    <ClientRouter />
    <title>{title}</title>

    <script is:inline>
      // Enhanced theme management for view transitions
      const getThemePreferences = () => {
        return (
          localStorage.getItem('theme') ||
          (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
        )
      }

      const applyThemeImmediate = () => {
        const isDark = getThemePreferences() === 'dark'
        document.documentElement.classList.toggle('dark', isDark)

        // Force re-application of critical styles during view transitions
        document.documentElement.style.setProperty('--applied-theme', isDark ? 'dark' : 'light')
      }

      // Global theme toggle function
      window.toggleTheme = () => {
        const isDark = document.documentElement.classList.contains('dark')
        const newTheme = isDark ? 'light' : 'dark'
        document.documentElement.classList.toggle('dark', !isDark)
        localStorage.setItem('theme', newTheme)
        document.documentElement.style.setProperty('--applied-theme', newTheme)

        const updateButtonLabel = () => {
          const srOnlyElement = document.querySelector('#theme-button>span.sr-only')
          if (srOnlyElement) {
            srOnlyElement.textContent = !isDark ? 'Cambiar a tema claro' : 'Cambiar a tema oscuro'
          }
        }
        updateButtonLabel()
      }

      // Prevent layout shifts during view transitions
      const preserveLayout = () => {
        // Force browser to acknowledge the current styles
        void document.documentElement.offsetHeight
      }

      // Apply theme immediately on initial load
      applyThemeImmediate()

      // Handle view transition events specifically
      document.addEventListener('astro:before-preparation', () => {
        applyThemeImmediate()
        preserveLayout()
      })

      document.addEventListener('astro:after-preparation', () => {
        applyThemeImmediate()
      })

      document.addEventListener('astro:before-swap', () => {
        applyThemeImmediate()
      })

      document.addEventListener('astro:after-swap', () => {
        applyThemeImmediate()
        preserveLayout()
        // Small delay to ensure styles are applied
        setTimeout(applyThemeImmediate, 0)
      })

      document.addEventListener('astro:page-load', () => {
        applyThemeImmediate()
      })
    </script>
  </head>
  <body class="text-main relative">
    <div class="-z-10 absolute h-full w-full bg-background">
      <div
        class="absolute bottom-0 left-0 right-0 top-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-size-[24px_34px] mask-[radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_100%)]"
      >
      </div>
    </div>
    <Header />
    <!-- <ContactButton /> -->
    <!-- <ContactModal /> -->
    <PageContainer>
      <slot />
    </PageContainer>
    <Footer />
  </body><style is:global>
    strong {
      color: rgba(var(--accent));
    }
  </style>
</html>
